#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_removed_modules
dcs
\end_removed_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command bibtex
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Wstęp
\end_layout

\begin_layout Standard
W ciągu ostatnich paru lat, w informatyce można zaobserwować wyjątkowo szybki
 rozwój tematyki przetwarzania w chmurze obliczeniowej (ang.
 Cloud Computing), a co za tym idzie, zainteresowanie stylami i wzorcami
 architektonicznymi, które w efektywny sposób są w stanie wykorzystać potencjał
 aplikacji rozproszonych.
 Takie podejście prezentuje między innymi idea mikro-serwisów, czyli małych,
 niezależnych komponentów komunikujących się między sobą prostymi protokołami
 sieciowymi
\begin_inset CommandInset citation
LatexCommand cite
key "Thoenes2015"

\end_inset

.
 Najczęściej stosowanym rozwiązaniem jest używanie komunikacji HTTP w konwencji
 REST, gdyż zostało to zarekomendowane przez prekursorów idei rozproszonych
 mikrousług - Martina Fowlera oraz Jamesa Levisa
\begin_inset CommandInset citation
LatexCommand cite
key "Fowler2014"

\end_inset

.
\end_layout

\begin_layout Standard
Oczywistym jest, że wraz ze wzrostem skomplikowania i rozmiaru systemu bazująceg
o na architekturze mikroserwisowej, powstaje coraz więcej usług, które komunikuj
ą się ze sobą nieustannie.
 Nieodzownym elementem testowania takiego oprogramowania jest więc sprawdzanie
 punktów styku między usługami (and.
 end points) pod kątem ich poprawności i zgodności ze specyfikacją.
 Zgodnie z wiedzą autora, w systemach zgodnych z architekturą mikroserwisową,
 testy integracyjne skupiają się na funkcjonalnościach każdej z usług, a
 walidacja poprawności zwracania i wymiany danych jest często ignorowana.
 W środowisku pracy zorganizowanym wokół mikroserwisów krytyczna jest komunikacj
a między zespołami pracującymi nad połączonymi mikrousługami.
 Taka komunikacja ma na celu uzgodnienie sposobów integracji wielu komponentów
 w postaci mikrousług, a jej efektem jest ustalenie i spisanie dokumentacji
 technicznej, będącej podstawą pisania nowych konsumentów danej usługi.
 Specyfikacja taka powinna być spójna i logiczna, dlatego często stosuje
 się języki formalne, które w swojej semantyce wykluczają lub minimalizują
 ryzyko sprzeczności lub niedomówień.
\end_layout

\begin_layout Section
Cel pracy
\end_layout

\begin_layout Standard
Niniejsza praca ma na celu zaprezentowanie modelu narzędzia do generowania
 testów połączeń między mikrousługami na podstawie ich specyfikacji zapisanej
 w języku RAML, zaimplementowanie tego modelu w języku C#, a także dokonanie
 weryfikacji istniejącego systemu opartego o komunikację REST w celu oceny
 skuteczności zaproponowanego rozwiązania.
\end_layout

\begin_layout Section
Struktura pracy
\end_layout

\begin_layout Standard
W rozdziale pierwszym zaprezentowany jest zarys obecnej sytuacji w dziedzinie
 rozwoju oprogramowania oraz problemy jakie stawia przed nimi szybki rozwój
 aplikacji rozproszonych.
 Został tam też zamieszczony zakres pracy, która jest odpowiedzią na problemy
 stające przed zespołami rozwijającymi nowoczesne systemy informatyczne.
 Częścią tego rozdziału jest również niniejsze przedstawienienie struktury
 pracy.
\end_layout

\begin_layout Standard
Rozdział drugi ma na celu wprowadzenie czytelnika w tematykę postawionego
 problemu oraz opisanie głównych pojęć związanych z tematyką pracy.
 Przeanalizowany zostanie styl architektoniczny oparty o mikrousługi, uwidacznia
jąc przyczyny jego powstania, zasady działania oraz najbardziej znaczące
 zalety.
 Nieuniknione będzie również zidentyfikowanie słabych stron i procesów,
 które według publikacji, mogłyby je redukować.
 Pamiętając o komunikacji mikrousług, opisana zostanie najczęściej używana
 metoda ich komunikacji czyli interfejsy REST z użyciem protokołu HTTP.
 W dalszym ciągu rozdziału nastąpi przybliżenie potrzeby dokumentacji interfejsó
w programistycznych (
\emph on
API
\emph default
), korzyści z nich płynących oraz standardów.
 Ta sekcja zostanie opisana na przykładzie języka RAML w wersji 1.0.
 W końcowej części tego rozdziału zaprezentowany zostanie koncept testowania
 jednostkowego i integracyjnego, zasady pisania takich testów oraz korzyści
 z nich płynące.
 
\end_layout

\begin_layout Standard
Rozdział trzeci zawiera opis proponowanego przez autora rozwiązania.
 Począwszy od modelu tworzonego narzędzia, poprzez projekt architektury
 zaprezentowane zostanie rozwiązanie problemów związanych z rosnącą popularności
ą komunikacji międzyusługowej.
 Rozdział uwzględnia rówież zmiany kultury pracy i dyscypliny deweloperskiej,
 która jest niezbęna przy stosowaniu takich rozwiązań procesowych.
 W końcowej części rozdziału spojrzymy na rezultaty implementacji, przedstawiają
c główne funkcjonalności.
\end_layout

\begin_layout Standard
W rozdziale czwartym skupimy się na weryfikacji proponowanego rozwiązania.
 Przybliżony zostanie istniejący system oparty o komunikację sieciową HTTP/REST.
 Następnie opisana zostanie metodologia przeprowadzania testów, czyli kryteria
 testowania oraz sposób weryfikowania poprawności działania stworzonego
 rozwiązania.
 W ostatniej sekcji tego rozdziału zaprezentowane zostaną otrzymane rezultaty
 testów i weryfikacji.
\end_layout

\begin_layout Standard
Ostatni rozdział zawiera anailizę rezulatów testów wyszczególnonych w rozdziale
 czwartym`, a następnie kreślone zostaną wyciągnięte wnioski na podstawie
 analizy wyników.
 W dalszej części, wybiegając w przyszłość, zidentyfikowane zostaną najważniejsz
e ścieżki udoskonalenia narzędzia nakreślając tym samym kierunki rozwoju
 całej dziedziny poruszanej w niniejszej pracy.
 W ostatniej sekcji całej pracy zostanie ona podsumowana.
\end_layout

\end_body
\end_document
