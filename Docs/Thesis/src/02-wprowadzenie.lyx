#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_removed_modules
dcs
\end_removed_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
\begin_inset CommandInset label
LatexCommand label
name "chap:Wprowadzenie-2"

\end_inset

Wprowadzenie
\end_layout

\begin_layout Section
Architektura oparta o mikrousługi
\end_layout

\begin_layout Subsection
Domain Driven Design jako źródło mikrousług
\end_layout

\begin_layout Standard
Procesem rozwoju oprogramowania rządzi szereg podstawowucj zasad, które
 umożliwiają skuteczne pisanie, a przede wszystkich utrzymywanie istniejącego
 kodu.
 Jedną z najważniejszch w ocenie autora reguł jest zasada pojedynczej odpowiedzi
alności, stanowiąca o tym, że każda funkcjonalność powinna być realizowana
 przez jedną wydzieloną część kodu i tylko przez nią.
 Na poziomie programowania zorientowanego obiektowo jest to klasa, na poziomie
 projektu jest to pakiet, a na poziomie architektury może być to komponent.
 Koncepcja projektowania aplikacji w oparciu o tę zasadę została nazwana
 zasadą projektowania sterowanego dziedziną (ang.

\emph on
 Domain Driven Design
\emph default
)
\begin_inset CommandInset citation
LatexCommand cite
key "Evans2004"

\end_inset

 i ostatnio bardzo często spotykanym paradygmatem prezentowania rzeczywistego
 świata w kodzie źródłowym.
 
\end_layout

\begin_layout Standard
Według tego podejścia proces projektowania 
\end_layout

\begin_layout Subsection
Zasada autonomiczności jako źródło problemów
\end_layout

\begin_layout Standard
Tworzenie mikrousług zgodnie z zaleceniami twórców tego konceptu wymaga
 również zmian w strukturach organizacji, która wytwarza ten system.
 Zmiana taka powinna polegać na zorganizowaniu całych zespołów wokół każdej
 usługi.
 Oczywiście każdy zespół może realizować prace związane z wieloma usługami,
 ale ważne jest aby jedna usługa była rozwijana i ustrzymywana przez jeden
 zespół.
 Podejście takie wymaga stworzenia kilkuosobowych zespołów, w których znajdują
 się graficy, testerzy, projektanci i programiści.
 Zespół ten sam decyduje, kiedy wdroży nową wersję swojej usługi.
 
\end_layout

\begin_layout Standard
Problem pojawia się w momencie kiedy nowa wersja usługi wprowadza zmiany
 w interfejsie API.
 
\end_layout

\begin_layout Section
Komunikacja REST
\end_layout

\begin_layout Standard
NOTE: Aby ta komunikacja była uporządkowana, warto zastosować konwencję,
 która definiowała będzie sposób odwoływania się do zasobów 
\end_layout

\begin_layout Section
Język RAML
\end_layout

\begin_layout Section
Testowanie jednostkowe
\end_layout

\end_body
\end_document
