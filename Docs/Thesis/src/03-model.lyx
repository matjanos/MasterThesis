#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass dcsbook
\use_default_options true
\begin_removed_modules
dcs
\end_removed_modules
\maintain_unincluded_children false
\language polish
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language polish
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
Proponowane rozwiązanie
\end_layout

\begin_layout Standard
\begin_inset CommandInset label
LatexCommand label
name "chap:Proponowane-rozwiązanie"

\end_inset


\end_layout

\begin_layout Standard
Rozdział drugi powinien uswiadomic czytelnika, ze obecny kierunek rozwoju
 inzynierii oprogramowania wymaga nowych narzedzi, które odciaza zespoły
 programistyczne od powtarzalnych czynnosci, które mimo, ze przynosza korzysci,
 sa czesto zaniedbywane, wprowadzajac dodatkowy koszt, nie przekładajacy
 sie na wymierny zysk.
 
\end_layout

\begin_layout Standard
Rozwiazaniem jest narzedzie automatyzujące proces analizy dokumentacji w
 celu generowania testów.
 W opini autora, przyniesie ono zysk w postaci weryfikacji dwóch artefaktów
 naraz: kodu zródłowego interfejsów oraz dokumentacji technicznej tych interfejs
ów.
\end_layout

\begin_layout Section
Model rozwiązania
\end_layout

\begin_layout Standard
Rozwiazanie należało zaprojektować na tyle uniwersalnie, aby spełnić dwa
 założenia.
\end_layout

\begin_layout Enumerate
Skoro jednym z podstawowych filarów architektury miroserwisowej jest niezależnoś
ć od technologii, to rozwiązanie musi wspierać generowanie kodu testów niezależn
ie od jezyka programowania.
\end_layout

\begin_layout Enumerate
Specyfikacja RAML jest tylko jednym z kilku jezyków technicznego dokumentowania
 interfejsów, więc rozwiązanie powinno być na tyle elastyczne, aby wspierać
 jego alternatywy.
\end_layout

\begin_layout Standard
Wychodzac z tych dwóch zasad, zaprojektowano rozwiązanie, które bazuje na
 zasadzie abstrakcji programowania obiektowego.
 W prosty sposób można zatem wymienić fragmenty kodu, aby umożliwić generowanie
 kodu testów w róznych technologiach i dla wielu róznych jezyków specyfikacji
 technicznej.
\end_layout

\begin_layout Standard
Program opierając się na dokumentacji interfejsów programistycznych generuje
 kod testów, które pokrywają odwołania HTTP do zasobów zgodne z zaimportowanym
 plikiem.
 Aby jednak rozwiazanie było elastyczne i otwarte na zmiany, generacja nie
 może być bezpośrednia.
 Na podstawie dokumentacji, generowany jest zestaw przypadków testowych,
 który w sposób zserializowany zostaje zapisany do pliku w formacie XML.
 Ten plik jest w dalszej części wczytywany przez kolejną jednostkę przetwarząjac
ą, która generuje kod testów, specyficzny dla wybranej technologii.
 Narzędzie wykonuje zatem swoje zadanie w nastepujacych krokach:
\end_layout

\begin_layout Enumerate
Wczytanie pliku specyfikacji i parsowanie go.
\end_layout

\begin_layout Enumerate
Analiza zawartości i generacja uniwersalnego opisu przypadków testowych.
\end_layout

\begin_layout Enumerate
Zapis przypadków testowych do tymczasowego pliku XML.
 
\end_layout

\begin_layout Enumerate
Odczyt i analiza przypadków testowych.
 
\end_layout

\begin_layout Enumerate
Generacja specyficznego dla technologii kodu testów.
\end_layout

\begin_layout Section
Opis działania aplikacji
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/data_flow.PNG
	width 100text%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Przepływ-danych"

\end_inset

Przepływ danych
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aplikacja zbudowana jest z dwóch głównych komponenetów: generatora przypadków
 testowych i translatora przypadków testowych z XML do testów w wybranym
 jezyku.
 Przepływ danych przedstawiony jest na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Przepływ-danych"

\end_inset

.
 
\end_layout

\begin_layout Standard
Główne zadanie jest realizowane przez pierwszy komponent, więc nad nim warto
 się chwilę pochylić.
\end_layout

\begin_layout Standard
Na 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Proces-tworzenia-testów"

\end_inset

 przedstawiono proces generowania przypadku testowego.
 Na nim oparty jest główny algorytm generowania przypadków testowych, który
 po sparsowaniu dokumentacji wykonuje nastepujace kroki:
\end_layout

\begin_layout Enumerate
Identyfikacja testowanej funkcjonalnosci (
\emph on
ang.
 identify independently testable feature
\emph default
) - aplikacja implementuje kilka klas, zgodnych z interfejsem 
\emph on
IUseCaseBuilder,
\emph default
 budujacych przypadki testowe.
 Każda z tych klas odpowiada innej cesze opisanej w ramach specyfikacji
 RAML; np.
 sprawdzanie czy odpowiedź na zapytanie o danej wartosci nagłówka „Content-Type”
 zwraca odpowiedź o oczekiwanym formacie odpowiedzi.
 
\end_layout

\begin_layout Enumerate
Identyfikacja reprezentatywnych wartosci wejsciowych i wyjsciowych (
\emph on
ang.
 identify representative values
\emph default
) - implementacje interfejsu 
\emph on
IUseCaseBuilder
\emph default
 w swoich ramach rozpoznają dane wejściowe dla testowanej funkcjonalności.
 Wartości wejsciowe w wielu przypadkach moga zostac zidentyfikowane wprost
 ze specyfikacji (np.
 nagłówki zapytania), z kolei w innych należy podać je jawnie (wartości
 parametrów URL).
 W tym celu wykorzystano cechę języka RAML umożliwiającą definiowanie opcjonalny
ch pól (
\emph on
ang.
 Annotations
\emph default
), gdzie należy umieścić wartość, która zostanie użyta.
 
\end_layout

\begin_layout Enumerate
Analiza w celu określenia wyniku operacji* (
\emph on
ang.
 derive model
\emph default
) - jak napisano w podsekcji 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Testowanie-funkcjonalne"

\end_inset

, ten elemenet procesu jest opcjonalny.
 Może być bowiem zastapiony danymi uzyskanymi przez wyrocznię, a ściślej
 mówiąc, zawartych w specyfikacji jako wartości pól 
\emph on
„Annotations”
\emph default
 lub wynikajacych wprost ze specyfikacji.
 
\end_layout

\begin_layout Enumerate
Specyfikacja przypadku testowego (
\emph on
ang.
 derive test case specifications
\emph default
) - na podstawie powyższych kroków, można wydedukować specyfikację przypadku
 testowego, którą aplikacja zapisuje w jednoznacznej formie jako węzeł dokumentu
 XML.
\end_layout

\begin_layout Standard
W ramach drugiego komponentu realizowany jest ostatni krok procesu zaproponowane
go przez Prezze i Younga
\begin_inset CommandInset citation
LatexCommand cite
key "DBLP:books/daglib/0017273"

\end_inset

: 
\end_layout

\begin_layout Enumerate
Generacja implmentacji przypadka testowego (
\emph on
ang.
 generate test case
\emph default
) - translacja przypadków testowych na kod źródłowy testów.
\end_layout

\begin_layout Standard
Pamiętać należy, że testy aplikacji sieciowych takich jak mikrousługi, wymagają
 zawarcia w nich dodatkowego kodu, pozwalajacego na zestawienie połaczenia
 HTTP, wysłanie zapytania oraz obsługę odpowiedzi.
 Ten fragment musi być jednak w pełni realizowany w procesie translacji,
 gdyż może wyglądać zupełnie inaczej dla różnych technologii.
\end_layout

\begin_layout Section
Szczegóły implementacyjne
\end_layout

\begin_layout Standard
Proponowane rozwiazanie zostało zaimplementowane w jezyku C# dla platformy
 .NET, niemniej jednak, jak wspomniano już wcześniej, może on generować testy
 dla wielu innych jezyków i platform.
 Przykład zaprezentowany w ramach tego rozwiazania generuje testy równiez
 w jezyku C#, dla biblioteki wspomagajacej testowanie xUnit.net
\begin_inset Foot
status open

\begin_layout Plain Layout
https://xunit.github.io
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Diagram klas zaimplementowanego rozwiązania widoczny jest na rysunku 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Diagram-klas-zaprezentowanego"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide true
sideways true
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename img/class_diagram.png
	lyxscale 50
	width 100theight%

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Diagram-klas-zaprezentowanego"

\end_inset

Diagram klas zaprezentowanego rozwiązania
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Generacja kodu pośredniego
\end_layout

\begin_layout Standard
Do implementacji wykorzystano parser do jezyka RAML
\begin_inset Foot
status open

\begin_layout Plain Layout
https://github.com/raml-org/raml-dotnet-parser
\end_layout

\end_inset

 udostepniony na licencji Apache 2.0.
 Aplikacja wczytuje z dysku twardego specyfikację RAML, parsuje ją, a nastepnie
 zwraca ją w przyjaznej dla programisty strukturze.
 Podczas procesu implementacji okazało się, że wykorzystany parser nie wspiera
 pól opcjonalnych typu 
\begin_inset Quotes pld
\end_inset

Annotations
\begin_inset Quotes prd
\end_inset

, więc należało zaimplementować obsługę tych pól.
\end_layout

\begin_layout Standard
Wygenerowany rezultat przetwarza klasa 
\emph on
XmlIntermediateCodeGenerator
\emph default
.
 Operuje ona w pętli, działając dla każdego zasobu pierwszego rzedu zgodnie
 z kodem 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Przetwarzanie-zasobu-zdefiniowan"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\series bold
\emph on
Wejście: 
\end_layout

\begin_layout Plain Layout

\emph on
resource
\emph default
- zasoby
\emph on
 
\end_layout

\begin_layout Plain Layout

\emph on
useCaseBuilder
\emph default
- kompozyt agregujacy wybranych budowniczych przypadków testowych 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
Wyjscie: 
\end_layout

\begin_layout Plain Layout

\emph on
plik XML zawierajacy definicje testów dla danego zasobu
\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public void WriteResourceUseCases(Resource resource, IUseCaseBuilder useCaseBuil
der)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	var useCases = useCaseBuilder.GetUseCases(resource);
\end_layout

\begin_layout Plain Layout

	foreach (var useCase in useCases)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		PrintUseCase(resourceUri, useCase);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	foreach (var innerResource in resource.Resources)
\end_layout

\begin_layout Plain Layout

	{
\end_layout

\begin_layout Plain Layout

		WriteResourceUseCases(innerResource, schema, resourceUri, useCaseBuilder);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Przetwarzanie-zasobu-zdefiniowan"

\end_inset

Przetwarzanie zasobu zdefiniowanego w RAML
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Lista przypadków testowych 
\emph on
useCases
\emph default
 generowana jest na podstawie zdefiniowanych wcześniej klas budowniczych,
 implementujacych wspólny interfejs 
\emph on
IUseCaseBuilder
\emph default
.
 W ramach przedstawionych przykładów, dla każdego zasobu analizowane są
 następujące testy:
\end_layout

\begin_layout Enumerate
Dla każdej metody zapytania kody odpowiedzi zdefiniowane w sekcji 
\begin_inset Quotes pld
\end_inset

Annotations
\begin_inset Quotes prd
\end_inset

 zgadzaja sie z parami [parametr, kod odpowiedzi]
\end_layout

\begin_layout Enumerate
Dla każdego zapytania zwracana jest odpowiedź o strukturze zgodnej z wartoscią
 w sekcji 
\emph on
Example
\emph default
: 
\end_layout

\begin_deeper
\begin_layout Enumerate
Wszystkie wymagane pola istnieją
\end_layout

\begin_layout Enumerate
Wszystkie pola istniejace w odpowiedzi są zadeklarowane w schemacie 
\end_layout

\end_deeper
\begin_layout Enumerate
Dla każdego ze zdefiniowanych typów odpowiedzi (wartość nagłówka 
\emph on
Content- Type
\emph default
), wynik odpowiada formatowi zdefiniowanemu w zapytaniu.
\end_layout

\begin_layout Enumerate
Wszystkie nagłówki HTTP odpowiedzi sa zgodne ze specyfikacją: 
\end_layout

\begin_deeper
\begin_layout Enumerate
wystepujace nagłówki sa zgodne z wzrorcem
\end_layout

\begin_layout Enumerate
wymagane nagłówki istnieją
\end_layout

\end_deeper
\begin_layout Standard
Jeśli jakikolwiek przypadek testowy (nawet jesli jego asercja nie polega
 na weryfikacji kodu odpowiedzi) zwróci kod błedu z klasy 500 (bład serwera),
 rezultatem testu bedzie bład.
\end_layout

\begin_layout Subsection
Generacja kodu testów
\end_layout

\begin_layout Standard
Każdy język, technologia i biblioteka przy pomocy których realizowane sa
 testy, wymaga kompletnie innego kodu źródłowego.
 Cały czas jednak bazuje on na modelu przypadku testowego, który jest wspólny
 dla wszystkich technologii.
 
\end_layout

\begin_layout Standard
Aby efektywnie zrealizować generację dokumentów tego typu, użyto techniki
 firmy Microsoft znanej jako szablony tekstowe T4 (
\emph on
ang.
 T4 Text Templates
\emph default
).
 Szablon taki wczytać można do pamięci podczas działania aplikacji, a nastepnie
 wygenerować kod na podstawie przekazanego modelu.
 Dużą zaletą takiego podejścia jest łatwość wymiany używanego szablonu,
 co pozwala na wygenerowanie kodu w praktycznie każdym języku.
\end_layout

\begin_layout Standard
Model pojedynczego przypadku testowego przedstawiono w kodzie 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Model-pojedynczego-przypadku"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

public class UnitTestModel
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	public string Name { get; set; }
\end_layout

\begin_layout Plain Layout

	public string Link { get; set; }
\end_layout

\begin_layout Plain Layout

	public HttpMethod Method { set; get; }
\end_layout

\begin_layout Plain Layout

	public AssertRestrictionLevel AssertRestrictionLevel { get; set;}
\end_layout

\begin_layout Plain Layout

	public HttpStatusCode ResponseCode { get; set; }
\end_layout

\begin_layout Plain Layout

	public IDictionary<string,string> Headers { get; set; }
\end_layout

\begin_layout Plain Layout

	public IDictionary<string,string> ResponseHeaders { get; set; }
\end_layout

\begin_layout Plain Layout

	public string Body { get; set; }
\end_layout

\begin_layout Plain Layout

	public string ResponseBody { get; set; }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "alg:Model-pojedynczego-przypadku"

\end_inset

Model pojedynczego przypadku testowego
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Zawiera on następujące pola:
\end_layout

\begin_layout Itemize

\emph on
Name
\emph default
 - tekst nazywajacy zwięźle przypadek testowy 
\end_layout

\begin_layout Itemize

\emph on
Link 
\emph default
- adres URL do wywołania 
\end_layout

\begin_layout Itemize

\emph on
Method -
\emph default
 metoda zapytania HTTP 
\end_layout

\begin_layout Itemize

\emph on
AssertRestrictionLevel
\emph default
 - poziom werfikacji odpowiedzi 
\end_layout

\begin_deeper
\begin_layout Itemize
0 - jakakolwiek odpowiedź z kodem innym niż z klasy 500
\end_layout

\begin_layout Itemize
1 - kod odpowiedzi zgodny z oczekiwanym
\end_layout

\begin_layout Itemize
2 - nagłówki odpowiedzi sa zgodne z wzorcem o ile istnieje, oraz ich istnieją
 jeśli zostały oznaczone jako obowiazkowe
\end_layout

\begin_layout Itemize
3 - format odpowiedzi jest zgodny z zadana wartoscia nagłówka
\emph on
 Content- Type
\end_layout

\begin_layout Itemize
4 - struktura odpowiedzi jest zgodna ze zdefinowanym schematem
\end_layout

\begin_layout Itemize
5 - tresc odpowiedzi jest w pełni zgodna z oczekiwana
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
ResponseCode 
\emph default
- oczekiwany kod odpowiedzi 
\end_layout

\begin_layout Itemize

\emph on
Headers 
\emph default
- lista nagłówków HTTP zapytania
\end_layout

\begin_layout Itemize

\emph on
ResponseHeaders
\emph default
 - lista oczekiwanych wartości naglówków odpowiedzi HTTP (z ewentualnymi
 wzorcami)
\end_layout

\begin_layout Itemize

\emph on
Body
\emph default
 - zawartość zapytania HTTP 
\end_layout

\begin_layout Itemize

\emph on
ResponseBody
\emph default
 - zawartość odpowiedzi HTTP
\end_layout

\end_body
\end_document
