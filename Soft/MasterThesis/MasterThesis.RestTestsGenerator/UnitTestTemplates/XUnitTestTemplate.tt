<#@ template language="C#" #>
<#@ parameter type="System.Collections.Generic.IEnumerable<MasterThesis.RestTestsGenerator.UnitTestWriters.UnitTestModel>" name="Models" #>
using System;
using System.IO;
using System.Net;
using System.Net.Http;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json.Schema;
using Xunit;

namespace MasterThesis.RestTestsGenerator.Tests
{
    /// <summary>
    /// Summary description for TemplateTest
    /// </summary
    public class TemplateTest
    {
        public TemplateTest()
        {
            //
            // TODO: Add constructor logic here
            //
        }

        <#
       foreach (var Model in Models)
       {
        #>

        [Fact]
        public async void <#=Model.Name#>()
        {
            // Arrange
            HttpStatusCode expectedStatusCode;
            Enum.TryParse("<#=Model.ResponseCode#>", out expectedStatusCode);

            var method = GetMethodFromString("<#=Model.Method#>");
            HttpRequestMessage message = new HttpRequestMessage(method, @"<#=Model.Link#>?access_token=287676068.f22a470.ff57149353f24c859f234a6b0c945049");
			<#
			foreach(var header in Model.Headers)
			{
			#>
            message.Headers.Add("<#=header.Key#>", "<#=header.Value#>");
		   <#
		   }
		   #>
            HttpStatusCode acctualStatusCode;
            string body = null;

            // Act
            using (HttpClient client = new HttpClient())
            using (var response = await client.SendAsync(message))
            {
                acctualStatusCode = response.StatusCode;

                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadAsStreamAsync();
                    body = new StreamReader(result).ReadToEnd();
                    // You can do whatever you want with the resulting stream, or you can ReadAsStringAsync, or just remove "Async" to use the blocking methods.
                }
                else
                {
                    // You can do some stuff with the status code to decide what to do.
                }
            }
            
            // Assert
            <#
			if(Model.AssertRestrictionLevel==MasterThesis.RestTestsGenerator.UseCases.AssertRestrictionLevel.StatusCode)
			{
			#>
            Assert.Equal(expectedStatusCode, acctualStatusCode);
            <#
            }
            if(Model.AssertRestrictionLevel==MasterThesis.RestTestsGenerator.UseCases.AssertRestrictionLevel.Headers)
            {
			#>
            Assert.Equal(expectedStatusCode, acctualStatusCode);
            <#
            }
            if(Model.AssertRestrictionLevel==MasterThesis.RestTestsGenerator.UseCases.AssertRestrictionLevel.ResultFormat)
            {
			#>
            Assert.Equal(expectedStatusCode, acctualStatusCode);
            <#
            }
            if(Model.AssertRestrictionLevel==MasterThesis.RestTestsGenerator.UseCases.AssertRestrictionLevel.Structure)
            {
			#>

            string schema = @"<#=Model.Body#>";

            JSchema s = JSchema.Parse(schema);
            JObject obj = JObject.Parse(body);
            // Assert
            Assert.True(obj.IsValid(s));
            <#
			}
			#>
        }
        <#
       }
        #>

        private System.Net.Http.HttpMethod GetMethodFromString(string methodString)
        {
            var m = methodString.ToUpper();
            if(m=="GET") return System.Net.Http.HttpMethod.Get;
            if(m=="POST") return System.Net.Http.HttpMethod.Post;
            if(m=="PUT") return System.Net.Http.HttpMethod.Put;
            if(m=="DELETE") return System.Net.Http.HttpMethod.Delete;
            if(m=="OPTIONS") return System.Net.Http.HttpMethod.Options;
            if(m=="HEAD") return System.Net.Http.HttpMethod.Head;
            if(m=="TRACE") return System.Net.Http.HttpMethod.Trace;

            throw new ArgumentException("Can't resolve the requested method keyword");
        }
    }
}
