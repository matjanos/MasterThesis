#%RAML 1.0
title: Instagram
version: v1
baseUri: https://api.instagram.com/{version}/
mediaType: application/json
annotationTypes:
  mediaId: string
  userId: string
  commentId: string
  tagName: string
  locId: number
  geoId: string
securitySchemes:
   oauth_2_0: !include securitySchemes/oauth_2_0.raml
   clientId: !include securitySchemes/clientId.raml
uses:
  types: types.raml
resourceTypes:
   usersListing: !include resourceTypes/usersListing.raml
   mediaSearch: !include resourceTypes/mediaSearch.raml
   secured: !include resourceTypes/secured.raml
   base: !include resourceTypes/base.raml
   feedsListing:  !include resourceTypes/feedsListing.raml
traits:
   acceptCallback: !include traits/acceptCallback.raml
   limitableByGeoPoint: !include traits/limitableByGeoPoint.raml
   limitable: !include traits/limitable.raml
   limitableByTime: !include traits/limitableByTime.raml
   limitableById: !include traits/limitableById.raml
securedBy: [ oauth_2_0 , clientId ]
/media:
  /{mediaId}:
    type: base
    (mediaId): "1338612569593807801_287676068"
    get:
      description: |
        Get information about a media object. The returned type key will allow you
        to differentiate between image and video media.
        Note: if you authenticate with an OAuth Token, you will receive the
        user_has_liked key which quickly tells you whether the current user has liked
        this media item.
      responses:
        200:
          body:
            application/json:
              type: types.Media
    /comments:
      type: { secured: { scope: comments } }
      get:
        description: Get a full list of comments on a media.
        responses:
          200:
            body:
              application/json:
                type: types.MediaComment
                example: |
                  {
                  "meta": {
                      "code": 200
                  },
                  "data": [
                      {
                      "created_time": "1473797841",
                      "text": "Prawie robi wielka ró¿nice",
                      "from": {
                          "username": "kamil518",
                          "profile_picture": "https://scontent.cdninstagram.com/t51.2885-19/s150x150/14359982_1784913531753031_570946720_a.jpg",
                          "id": "192477807",
                          "full_name": "Kamil Oœliz³o"
                      },
                      "id": "17851823476094686"
                      }
                    ]
                  }
      post:
        description: Create a comment on a media. Please email apidevelopers[at]instagram.com for access.
        body:
          application/x-www-form-urlencoded:
            properties:
              text:
                description: Text to post as a comment on the media as specified in {mediaId}.
                required: true
    /likes:
      type: { secured: { scope: likes } }
      get:
        description: |
          Get a list of users who have liked this media.
          Required scope: likes.
        responses:
          200:
            body:
              application/json:
                type: types.MediaLikes
                example: |
                  {
                    "meta": {
                      "code": 200
                    },
                    "data": [
                      {
                        "username": "kamil518",
                        "profile_picture": "https://scontent.cdninstagram.com/t51.2885-19/s150x150/14359982_1784913531753031_570946720_a.jpg",
                        "id": "192477807",
                        "full_name": "Kamil Oœliz³o"
                      },
                      {
                        "username": "ensorceler",
                        "profile_picture": "https://scontent.cdninstagram.com/t51.2885-19/s150x150/12976576_185964258463377_764013761_a.jpg",
                        "id": "391387866",
                        "full_name": "Monika Zalewska"
                      }
                    ]
                  }
      post:
        description: Set a like on this media by the currently authenticated user.
        responses:
          200:
            description: |
              Successfully liked a media object
      delete:
        description: Remove a like on this media by the currently authenticated user.
        responses:
          204:
            description: |
              Like removed succesfully
  /search:
    type: mediaSearch
    get:
      is: [ limitableByTime , limitableByGeoPoint ]
      description: |
        Search for media in a given area. The default time span is set to 5 days.
        The time span must not exceed 7 days. Defaults time stamps cover the
        last 5 days.
  /popular:
    type: mediaSearch
    get:
      description: |
        Get a list of what media is most popular at the moment.
/tags:
  /{tagName}:
    type: base
    (tagName): "computerscience"
    uriParameters:
      tagName:
        description: Name of tag.
    get:
      description: Get information about a tag object.
      responses:
        200:
          body:
            application/json:
              type: types.Tag
              example: |
                {
                  "meta": {
                    "code": 200
                  },
                  "data": {
                    "media_count": 81699,
                    "name": "computerscience"
                  }
                }
    /media/recent:
      type: base
      get:
        is: [ limitableById ]
        description: |
          Get a list of recently tagged media. Note that this media is ordered by when the media was tagged
          with this tag, rather than the order it was posted. Use the max_tag_id and min_tag_id parameters
          in the pagination response to paginate through these objects.
        responses:
          200:
            body:
              application/json:
                type: types.TagsRecentMedia
  /search:
    type: base
    get:
      description: |
        Search for tags by name. Results are ordered first as an exact match, then by popularity.
        Short tags will be treated as exact matches.
      queryParameters:
        q:
          description: |
            A valid tag name without a leading #.
          required: true
          example: nofilter
      responses:
        200:
          body:
            application/json:
              type: types.TagsSearch
/users:
  /{userId}:
    type: base
    (userId): "287676068"
    get:
      description: Get basic information about a user.
      responses:
        200:
          body:
            application/json:
              type: types.UserAccount
              example: |
                {
                  "meta": {
                    "code": 200
                  },
                  "data": {
                    "username": "matjanos",
                    "bio": "",
                    "website": "",
                    "profile_picture": "https://scontent.cdninstagram.com/t51.2885-19/11881894_403830066488300_1587261808_a.jpg",
                    "full_name": "Kuba",
                    "counts": {
                      "media": 2,
                      "followed_by": 101,
                      "follows": 82
                    },
                    "id": "287676068"
                  }
                }
    /follows:
      type: usersListing
      get:
        description: Get the list of users this user follows.
    /followed-by:
      type: usersListing
      get:
        description: Get the list of users this user is followed by.
    /media/recent:
      type: feedsListing
      get:
        is: [ limitableById , limitableByTime , limitable ]
        description: |
          See the authenticated user's feed. May return a mix of both image and
          video types.
    /relationship:
      type: { secured: { scope: comments } }
      get:
        description: Get information about a relationship to another user.
        responses:
          200:
            body:
              application/json:
                type: types.Relationships
                example: |
                  {
                    "meta": {
                    "code": 200
                    },
                    "data": {
                    "outgoing_status": "none",
                    "target_user_is_private": true,
                    "incoming_status": "none"
                    }
                  }
      post:
        description: Modify the relationship between the current user and the target user.
        body:
          application/x-www-form-urlencoded:
            properties:
              action:
                description: One of follow/unfollow/block/unblock/approve/deny.
                enum:
                  - follow
                  - unfollow
                  - block
                  - unblock
                  - approve
                  - deny
        responses:
          200:
            body:
              application/json:
                type: types.Relationships
  /search:
    type: usersListing
    get:
      description: Search for a user by name.
      queryParameters:
        q:
          description: A query string.
          required: true
          example: some query
        count:
          description: Number of users to return.
          type: integer
          example: 1
  /self:
    type: { secured: { scope: basic } }
    get:
      description: Retrieve the authenticated user
      responses:
        200:
          body:
            application/json:
              type: types.UserAccount
              example: |
                {
                  "meta": {
                    "code": 200
                  },
                  "data": {
                    "username": "matjanos",
                    "bio": "",
                    "website": "",
                    "profile_picture": "https://scontent.cdninstagram.com/t51.2885-19/11881894_403830066488300_1587261808_a.jpg",
                    "full_name": "Kuba",
                    "counts": {
                      "media": 2,
                      "followed_by": 101,
                      "follows": 82
                    },
                    "id": "287676068"
                  }
                }
    /feed:
      type: feedsListing
      get:
        is: [ limitableById , limitable ]
        description: |
          See the authenticated user's feed. May return a mix of both image and
          video types.
    /requested-by:
      securedBy:
        - oauth_2_0:
            scopes: [relationships]
      type: usersListing
      get:
        description: "List the users who have requested this user's permission to follow."
    /media/liked:
      type: feedsListing
      get:
        is: [ limitable ]
        description: |
          See the authenticated user's list of media they've liked. May return a mix
          of both image and video types.
          Note: This list is ordered by the order in which the user liked the media.
          Private media is returned as long as the authenticated user has permission
          to view that media. Liked media lists are only available for the currently
          authenticated user.
        queryParameters:
          max_like_id:
            description: Return media liked before this id.
            type: integer
            example: 100
/locations:
  /{locId}:
    type: base
    (locId): 217492538
    uriParameters:
      locId:
        type: integer
    get:
      description: Get information about a location.
      responses:
        200:
          body:
            application/json:
              type: types.Location
              example: |
                {
                  "meta": {
                    "code": 200
                  },
                  "data": {
                    "latitude": 52.4,
                    "id": "217492538",
                    "longitude": 16.9167,
                    "name": "Poznan, Poland"
                  }
                }
    /media/recent:
      type: feedsListing
      get:
        is: [ limitableById , limitableByTime ]
        description: |
          Get a list of recent media objects from a given location. May return a
          mix of both image and video types.
  /search:
    type: base
    get:
      is: [ limitableByGeoPoint ]
      description: Search for a location by geographic coordinate.
      queryParameters:
        lat:
          description: |
            Returns a location mapped off of a foursquare v2 api location id. If
            used, you are not required to use lat and lng.
          example: 48.858844
        lng:
          description: |
            Returns a location mapped off of a foursquare v1 api location id. If used,
            you are not required to use lat and lng. Note that this method is deprecated;
            you should use the new foursquare IDs with V2 of their API.
          example: 2.294351
      responses:
        200:
          body:
            application/json:
              type: types.Locations
documentation:
  - title: Authentication
    content: !include docs/authentication.md
  - title: Headline
    content: !include docs/headline.md
